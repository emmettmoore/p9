CONF=paecpu
CONFLIST=paecpu paecpuf pae paed paef
CRAPLIST=

objtype=386
</$objtype/mkfile
p=9

# must match mem.h
APBOOTSTRAP=0xF0003000
KTZERO=0xF0100020

DEVS=`{rc ../port/mkdevlist $CONF}
KLFLAGS=`{../port/flags LD $CONF}

PORT=\
	alarm.$O\
	allocb.$O\
	auth.$O\
	cache.$O\
	chan.$O\
	dev.$O\
	edf.$O\
	fault.$O\
	page.$O\
	parse.$O\
	pgrp.$O\
	portclock.$O\
	print.$O\
	proc.$O\
	qio.$O\
	qlock.$O\
	rdb.$O\
	rebootcmd.$O\
	segment.$O\
	sysfile.$O\
	sysproc.$O\
	mcslock.$O\
#	taslock.$O\
	tod.$O\

OBJ=\
	l.$O\
	plan9l.$O\
	cga.$O\
	i8253.$O\
	i8259.$O\
	i8042.$O\
	main.$O\
	memory.$O\
	mmu.$O\
	random.$O\
	syscallfmt.$O\
	trap.$O\
	$CONF.root.$O\
	$CONF.rootc.$O\
	$DEVS\
	$PORT\

LIB=\
	/$objtype/lib/libmemlayer.a\
	/$objtype/lib/libmemdraw.a\
	/$objtype/lib/libdraw.a\
	/$objtype/lib/libip.a\
	/$objtype/lib/libfis.a\
	/$objtype/lib/libsec.a\
	/$objtype/lib/libmp.a\
	/$objtype/lib/libc.a\

ETHER=`{echo devether.c ether*.c | sed 's/\.c/.'$O'/g'}
VGA=`{echo devvga.c screen.c vga*.c | sed 's/\.c/.'$O'/g'}
SDEV=`{echo ../port/sd*.c devsd.c sd*.c | sed 's:\.\./port/::g;s/\.c/.'$O'/g'}
FW=/sys/lib/firmware

<|../port/dirdep $CONF

$p$CONF:Q:	$CONF.c $OBJ $LIB
	$CC $CFLAGS '-DKERNDATE='`{date -n} $CONF.c
	$LD $KLFLAGS -o $target -T$KTZERO -l $OBJ $CONF.$O $LIB
	size $target

# don't strip the gzipped kernels -- too frustrating when that's all you have!
$p%.gz:D:	$p%
	gzip -9 <$p$stem >$p$stem.gz

install:V:	$p$CONF
	cp $p$CONF /$objtype/

<../boot/bootmkfile
<../port/portmkfile
<|../port/mkbootrules $CONF

$ETHER: 			etherif.h ../port/netif.h
$VGA mouse.$O:			screen.h /sys/include/memdraw.h
devfloppy.$O: 			floppy.h
archmp.$O mp.$O:		apbootstrap.h
apic.$O archmp.$O mp.$O:	mp.h
$SDEV:				../port/sd.h
sdiahci.$O:			ahci.h
sdiahci.$O sdodin.$O sdvanir.$O:		../port/led.h
devaoe.$O sdaoe.$O:		../port/aoe.h
main.$O:			init.h reboot.h
devusb.$O usbuhci.$O usbohci.$O usbehci.$O: ../port/usb.h
trap.$O:			/sys/include/tos.h
$SDEV:			/sys/include/fis.h
etherm10g.$O:			$FW/etherm10g2k.i $FW/etherm10g4k.i
devtrace.$O:			archtrace.h

init.h:D:		../port/initcode.c init9.c
	$CC ../port/initcode.c
	$CC init9.c
	$LD -l -R1 -s -o init.out init9.$O initcode.$O /386/lib/libc.a
	{echo 'uchar initcode[]={'
	 xd -1x <init.out |
		sed -e 's/^[0-9a-f]+ //' -e 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} > init.h

reboot.h:D:	rebootcode.s
	$AS rebootcode.s
	$LD -l -s -T0x11000 -R4 -o reboot.out rebootcode.$O
	{echo 'uchar rebootcode[]={'
	 xd -1x reboot.out |
		sed -e '1,2d' -e 's/^[0-9a-f]+ //' -e 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} > reboot.h

apbootstrap.h:	apbootstrap.s mem.h
	$AS $prereq
	$LD -o apbootstrap.out -T$APBOOTSTRAP -R4 -l -s apbootstrap.$O
	{echo 'uchar apbootstrap[]={'
	 xd -1x apbootstrap.out |
		sed -e '1,2d' -e 's/^[0-9a-f]+ //' -e 's/ ([0-9a-f][0-9a-f])/0x\1,/g'
	 echo '};'} > $target

acid:V:
	8c -a -w -I. i8253.c>acid

%.checkether:VQ:
	for (i in ether*.c){
		x=`{echo $i | sed 's/\.c//'}
		if(! ~ $x ether8390 && ! grep -s '^	'^$x^'([ 	]|$)' $stem)
			echo $x not included in $stem
	}
	exit 0

%.checkvga:VQ:
	for (i in vga*.c){
		x=`{echo $i | sed 's/\.c//'}
		if(! ~ $x vga vgax vgasavage && ! grep -s '^	'^$x^'([ 	]|$)' $stem)
			echo $x not included in $stem
	}
	exit 0

%.clean:V:
	rm -f $stem.c [9bz]$stem [9bz]$stem.gz boot$stem.* reboot.h apbootstrap.h init.h
