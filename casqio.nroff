.TH CASQIO 9
.SH NAME
casq: casqget, casqput, casqopen, casqfree, casqclose, casqsize, casqsetlimit \- nonblocking queued I/O for devices
.SH SYNOPSIS
.PP
.ta \w'\fLCasQueue*  'u
.B
CasQueue* casqopen(int limit)
.PP
.B
Block* casqget(CasQueue *q) 
.PP
.B
int casqput(CasQueue *q, Block *b) 
.PP
.B
ulong casqsize(CasQueue *q)
.PP
.B
void casqfree(CasQueue *q) 
.PP
.B
void casqclose(CasQueue *q) 
.PP
.B
void casqsetlimit(CasQueue *q, int limit)
.SH DESCRIPTION
This suite of functions provides a
nonblocking alternative to the serial
data buffering for device drivers used in /sys/src/9/port/qio.c.
Data is stored in a 
.B CasQueue 
structure as a sequence of variable sized
.BR Blocks;
see
.IR allocb (9).
.PP
The 
.B CasQueue
is a lightweight alternative to
.B Queue.
The casq interface is less featureful than
the qio interface, but is non-blocking and 
potentially faster. Enqueue and dequeue operations 
utilize the compare-and-swap (cas) atomic operation 
present on most Plan 9 compatible hardware to guarantee safety. 
.PP
A
.B CasQueue
is initialized with a dummy node such that the
head (
.IR bfirst ) 
always points to the dummy.
The tail (
.IR blast ) 
field points either to the last element in the 
node or the second to last element in the node. More details on
this implementation can be found in the link included below.
.TP
.I casqopen
initializes and returns a pointer to a new
.B CasQueue,
with
.I limit
setting the queue limit (high water mark) in bytes. 
The queue is initialized with 
.IR bfirst
and
.IR blast
both pointing to a dummy node.
.TP
.I casqget
dequeues and returns the first "live" (non-dummy)
.B Block
on 
.I q.
If 
.I q
is empty, it returns a null pointer.
If 
.I q
is closed, it calls 
.IR error(
.B Ehungup ).
.TP
.I casqput
enqueues 
.I b 
to the end of the 
.I q.
and returns the number of bytes enqueued. If 
.I q
is closed, it calls 
.IR error(
.B Ehungup ).
If 
.I q->len > q->limit
, it returns -1.
.TP
.I casqsize 
returns the total number of bytes
allocated to the blocks in
.I q. 
Because 
.I q->blast
can lag behind the tail by at most one block, 
casqsize is accurate within one block 
(the tail specifically).
.TP
.I casqfree
Frees any remaining blocks from 
.I q 
(including the dummy) and then frees the
.I q
itself. Should only be called once 
.I q
is safely closed
and no processes are still writing to and reading from
.I q.
.TP
.I casqclose
 Sets q->close to 1.
.TP
.I casqsetlimit
resets the limit of the 
.I q
to
.I limit.

SOURCE
.PP
.B /sys/src/9/port/casq.c

.SH SEE ALSO
.PP
.I allocb(9),
http://www.cs.rochester.edu/u/scott/papers/1996_PODC_queues.pdf
