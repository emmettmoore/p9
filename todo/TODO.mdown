<!DOCTYPE html>
<html>
<head>
        <title>Kernel Sanders Project Notes </title>
        <link rel="stylesheet" type="text/css" href="style.css">
</head>
<body>

# Kernel Sanders Project Notes

## Our Plan

### Get it to Compile and Link
-	Undefined Function
    1.  Not hugely substantial
    2.  Leaving blank functions in stuff.c. Compiling separately from qio.c, but linking with it later in mkfile.
-   Undefined Externals
    1.  Probably a huge pain in the ass. 
    2.  Have to simualte ever single global variable referenced from qio.c
-   Need to define a main routine
    1.  Not hard, obviously the last step as well. 
    2.  This will mark the end of the "let's get it to compile" stage and start the "lets simulate a test environment on the original file" stage

### Simulate a Test Environment
-   _Functions Fake-Implemented in qio.c_
    2.  freeb
    3.  `waserror` == `(up->;nerrlab++, setlabel(&up->errlab[up->nerrlab-1]))`
        -   **Solution**: we don't need waserror in this simulation, so we will just `#define waserror 0`
    4. nexterror
        -   **Solution**: empty. As in, `void { return; }`
    5. `poperror` == `up->nerrlab--`

-   _Functions Implemented In qio.c_
    1.  allocb (and helper, \_allocb)

-   Make the nonsensical functions and simulated global variables make sense.
-   Don't change qio.c.
-   Once we can queue stuff, in a test environment we are comfortable with, we can start to change qio.c

### Update qio.c With New Algorithm
-   profile it yo!

### Put it Back into the Kernel
-   6 inches beeyottch

- [Example][1] 


</body>
</html>
[1]: http://www.example.com/ "Example"
